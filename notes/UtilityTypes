
//utility types
Partial<T> //makes all properties optional
Required<T> //makes all properties required
Readonly<T> //makes all properties readonly
Pick<T, K extends keyof T> //picks a subset of properties from T
Record<K extends keyof any, T> //creates an object type with properties K of type T
Exclude<T, U> //excludes from T those types that are assignable to U
Extract<T, U> //extracts from T those types that are assignable to U
NonNullable<T> //excludes null and undefined from T
ReturnType<T> //obtains the return type of a function type
InstanceType<T> //obtains the instance type of a constructor function type


//Partial

interface Assignment {
  studentId: string,
  title:string,
  grade:number,
  verified?: boolean
}

const updateAssignment = (assign: Assignment, propsToUpdate: Partial<Assignment>): Assignment => {
  return {...assign, ...propsToUpdate}
}

const assign1 : Assignment = {
  studentId: '123',
  title: 'Assignment 1',
  grade: 100
}

console.log(updateAssignment(assign1, {grade:95}))

const assignGraded :Assignment = updateAssignment(assign1,{grade:95});


//Required and Readonly

const recordAssignment = (assign: Required<Assignment>): Assignment =>{
  //send to database here
  return assign;
}

const assignVerified: Readonly <Assignment> = {
  ... assignGraded, verified:true
}

assignVerified.grade = 90; //error

recordAssignment(assignGraded); //error because verified is missing

recordAssignment ({...assignGraded, verified:true}); //ok


//Record Utility Type

//Create a map of hex colors, which keys are strings and values are strings
const hexColorMap: Record<string, string> = {
  red: '#ff0000',
  green: '#00ff00',
  blue: '#0000ff'
}

type Students = 'Alice' | 'Bob' | 'Eve';
type LetterGrade = 'A' | 'B' | 'C' | 'D' | 'F';

const studentGrades : Record<Students , LetterGrade>  = {
  Alice: 'A',
  Bob: 'B',
  Eve: 'C'
  Kelly : 'U' //error
}

interface Grades {
  assign1:number,
  assign2:number
}

const gradeData : Record <Students, Grades> = {
  //Interface turns into an object type
  Alice: {assign1: 100, assign2: 100},
  Bob: {assign1: 90, assign2: 80},
  Eve: {assign1: 80, assign2: 70},
  Kelly: {assign1: 70, assign2: 60} //error
}


//Pick and Omit Type

// interface Assignment {
//   studentId: string,
//   title:string,
//   grade:number,
//   verified?: boolean
// }

//Pick a subset of properties from Assignment
type AssignResult = Pick <Assignment, "studentId" | "grade">

const score : AssignResult = {
  studentId: '123',
  grade: 100
}

//Omit a subset of properties from Assignment
type AssignPreview = Omit < Assignment, "grade" | "verified">

const preview : AssignPreview = {
  studentId: '123',
  title: 'Assignment 1'

}

//Exclude and Extract

// type LetterGrade = 'A' | 'B' | 'C' | 'D' | 'F';

type adjustedGrade = Exclude<LetterGrade,"F"> //Exclude F from LetterGrade type

type highGrades = Extract <LetterGrade, "A" | "B"> //Extract A and B from LetterGrade type


//NonNullable

type AllPossibleGrades = "Selim" | "John" | null | undefined;

//To make sure it is a non-nullable type, which excludes nulls and undefined
type NamesOnly = NonNullable<AllPossibleGrades>; //Selim | John



//Return Type

// type newAssign = {title:string,points:number}

const createNewAssign = (title:string, points:number) =>{
  return {title,points};
}

//Dynamic Return type
type newAssign  = ReturnType <typeof createNewAssign>


const tsAssign : newAssign = createNewAssign ("Utility Types", 100);
console.log(tsAssign);



//Parameters Type

type AssignParams = Parameters <typeof createNewAssign> //Returns an array of types

const assignArgs : AssignParams = ["Utility Types", 100];

const tsAssign2: newAssign  = createNewAssign (...assignArgs);
console.log(tsAssign2)


//Awaited Utility Type - helps with ReturnType of Promise

interface User {
  id: number,
  name:string,
  username:string,
  email:string
}

const fetchUsers = async(): Promise<User[]> =>{
  const data = await fetch(
    'https://jsonplaceholder.typicode.com/users'
  ).then(res => {
    return res.json()
  }).catch(err => {
    if(err instanceof Error)console.log(err.message)
  })
  return data
}

//Using without Await
type FetchUsersReturnType = ReturnType<typeof fetchUsers> //Promise<User[]>

//Using with Await
type FetchUsersReturnTyp2 = Awaited<ReturnType<typeof fetchUsers>> //User[] 

fetchUsers().then(users => console.log(users));